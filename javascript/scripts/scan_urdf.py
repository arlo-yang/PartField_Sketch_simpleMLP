import os
import json

def scan_urdf_folders():
    # 获取脚本所在目录的绝对路径
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # 构建新的 urdf 目录的绝对路径（现在在 javascript 目录下）
    urdf_path = os.path.abspath(os.path.join(script_dir, '../urdf'))
    models = []
    
    print("Scanning directories:")
    print(f"URDF path: {urdf_path}")
    print("\nFound URDF models:")
    
    # 扫描 urdf 目录
    for folder in sorted(os.listdir(urdf_path)):
        if folder.isdigit():
            mobility_path = os.path.join(urdf_path, folder, 'mobility.urdf')
            meta_path = os.path.join(urdf_path, folder, 'meta.json')
            # 添加对合并OBJ文件和GLB文件的检查
            merged_obj_path = os.path.join(urdf_path, folder, 'yy_object', 'yy_merged.obj')
            yy_object_dir = os.path.join(urdf_path, folder, 'yy_object')
            
            # 检查yy_merged_original.obj文件（兼容旧版本）
            original_obj_path = os.path.join(urdf_path, folder, 'yy_object', 'yy_merged_original.obj')
            
            # 扫描所有yy_merged_{joint_id}.obj文件
            arrow_objs = {}
            if os.path.exists(yy_object_dir):
                for filename in os.listdir(yy_object_dir):
                    if filename.startswith('yy_merged_') and filename.endswith('.obj'):
                        # 提取joint_id部分
                        joint_id = filename.replace('yy_merged_', '').replace('.obj', '')
                        if joint_id.isdigit() or joint_id.isalnum():  # 确保是有效的joint_id
                            arrow_objs[joint_id] = f'../../urdf/{folder}/yy_object/{filename}'
            
            if os.path.exists(mobility_path) and os.path.exists(meta_path):
                with open(meta_path, 'r') as f:
                    meta_data = json.load(f)
                
                model_entry = {
                    'urdf': f'../../urdf/{folder}/mobility.urdf',  # 更新相对路径
                    'meta': f'../../urdf/{folder}/meta.json',      # 更新相对路径
                    'color': '#263238'
                }
                
                # 检查合并OBJ文件是否存在，如果存在则添加其路径
                has_merged_obj = os.path.exists(merged_obj_path)
                if has_merged_obj:
                    model_entry['mergedObj'] = f'../../urdf/{folder}/yy_object/yy_merged.obj'
                
                # 检查original obj文件是否存在，如果存在则添加其路径（兼容旧版本）
                has_original_obj = os.path.exists(original_obj_path)
                if has_original_obj:
                    model_entry['originalObj'] = f'../../urdf/{folder}/yy_object/yy_merged_original.obj'
                
                # 添加arrow对象列表
                if arrow_objs:
                    model_entry['arrowObjs'] = arrow_objs
                    # 添加可用关节ID列表
                    model_entry['availableJointIds'] = list(arrow_objs.keys())
                
                # 打印模型信息，包括是否有合并OBJ文件和箭头文件
                model_info = f"- Model urdf/{folder}: {meta_data.get('model_cat', 'Unknown category')}"
                if has_merged_obj:
                    model_info += " (with merged obj)"
                if has_original_obj:
                    model_info += " (with original obj)"
                if arrow_objs:
                    model_info += f" (with {len(arrow_objs)} arrow objs: {list(arrow_objs.keys())})"
                print(model_info)
                
                models.append(model_entry)
    
    print(f"\nTotal models found: {len(models)}")
    
    # 生成 JavaScript 配置文件
    js_content = """// Auto-generated by scan_urdf.py
export const initialModels = %s;
""" % json.dumps(models, indent=4)
    
    # 确保目标目录存在并获取正确的输出路径
    output_dir = os.path.normpath(os.path.join(script_dir, '../example/src'))
    os.makedirs(output_dir, exist_ok=True)
    
    output_file = os.path.join(output_dir, 'models-config.js')
    print(f"\nWriting configuration to: {output_file}")
    
    with open(output_file, 'w') as f:
        f.write(js_content)
    
    print("Configuration file generated successfully!")

if __name__ == '__main__':
    scan_urdf_folders() 